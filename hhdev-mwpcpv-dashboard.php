<?php
// mwpcpv dashboard
// version: 1.0.9
// ---------------------
 class MainWPCheckPluginVulnerability extends MainWPCheckPluginVulnerabilityActivator {

   // add text domain
   // --------------------
  public function __construct() {

    add_action( 'init', array(&$this, 'hhdev_mwpcpv_load_textdomain') );
    add_filter('mainwp_getsubpages_sites', array(&$this, 'hhdev_mwpcpv_managesites_subpage' ), 10, 1 );

  /*  if ( isset( $_GET['page'] ) && ( 'ManageSiteshhdev-mwp-check-plugins-vulnerability' == $_GET['page'] ) ) {
			require_once 'includes/functions.php';
			add_action( 'admin_print_footer_scripts', 'mainwp_creport_admin_print_footer_scripts' );
		}*/
 	}

  public function hhdev_mwpcpv_load_textdomain() {
     load_plugin_textdomain( 'hhdev-mwpcpv', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/' );
  }

  public function hhdev_mwpcpv_managesites_subpage( $subPage ) {

		$subPage[] = array(
			'title'                 => 'Check Plugins Vulnerability',
			'slug'                     => &$this->plugin_handle,
			'sitetab'             => true, // show/hide tab menu - not working correct, true is hidden
			'menu_hidden'     => false,
			'callback'             => array( 'MainWPCheckPluginVulnerability', 'hhdev_mwpcpv_render_page' ),
		);

		return $subPage;
	}

     //Create the extension dashboard page
     // --------------------------

   public static function hhdev_mwpcpv_render_page() {

         global $MainWPCheckPluginVulnerabilityActivator;

         do_action('mainwp-pageheader-extensions', __FILE__); // page header

         ?>
         <div id="mainwp_custom_dashboard_extension">

         <div class='ui segment'>
           <h2><?php echo wp_sprintf( __('Check Plugins Vulnerability','hhdev-mwpcpv')); ?></h2>

           <p><?php echo sprintf( __( 'Here you can check if there are plugins that need updating for security reasons.', 'hhdev-mwpcpv' )); ?></p>

           <ul>
             <li><?php echo sprintf( __( 'Data from %s is used to check plugins for each childsite.', 'hhdev-mwpcpv' ),
             			'<a href="https://www.wordfence.com/intelligence-documentation/v2-accessing-and-consuming-the-vulnerability-data-feed/" target="_blank">Wordfence api intelligence database</a>'
             		); ?></li>

             <li><?php echo wp_sprintf( __('The scan only shows plugins that need to be updated per site.','hhdev-mwpcpv')); ?></li>

           <li><?php echo wp_sprintf( __('An adapted data file is created for scanning with vulnarability data only 24 month in the past based on when it was updated.','hhdev-mwpcpv')); ?></li>
         </ul>

           <div class="ui info message">
             <?php
             if (isset($_POST['mwpcpv-get-data-file'])) {

               $updated = $MainWPCheckPluginVulnerabilityActivator->hhdev_save_api_data_file();
               if($updated) $make_file = $MainWPCheckPluginVulnerabilityActivator->hhdev_make_adapted_file();

               if($updated) echo wp_sprintf('<p>', _e('File updated!','hhdev-mwpcpv'),'</p>');
               if(!$updated) echo wp_sprintf('<p>', _e('Not updated!','hhdev-mwpcpv'),'</p>');
               if($make_file) echo wp_sprintf('<p>', _e('Adapted file created!!','hhdev-mwpcpv'),'</p>');

             }

            if(!$MainWPCheckPluginVulnerabilityActivator->hhdev_data_file_exists()) echo sprintf(__('No base file found. Please click the "Update data file" button.','hhdev-mwpcpv')); ?>

          <form id="data-update" name="data-update" action="<?php echo str_replace('%7E', '~', $_SERVER['REQUEST_URI']); ?>" method="post">
           <p><?php if($MainWPCheckPluginVulnerabilityActivator->hhdev_data_file_exists()) {
                echo sprintf(__('Local WordFence api data file: ','hhdev-mwpcpv'));
                echo $MainWPCheckPluginVulnerabilityActivator->hhdev_get_file_date();
              } ?></p>
           <p><input name="mwpcpv-get-data-file" type="hidden" value="1" /></p>

           <p><a class="ui button green" href="#" onclick="javascript:document.getElementById('data-update').submit();"><?php _e('Update data file','hhdev-mwpcpv'); ?></a></p>
          </form>

        </div>
        </div>

        <p></p>

        <div>
         <?php
         // end segment

         ?>
         <script>
         jQuery(function($) {
           $('.ui.segment.website').find('span').parent().addClass('novuln');
           $( "#toggle-novuln" ).on( "click", function() {
             $( ".ui.segment.website.novuln" ).toggle( "slow", function() {
             // Animation complete.
             });
           });
         });
         </script>
         <style>
         <!--
         #toggle-novuln { max-width: 320px; border: 1px solid #ccc; border-radius: 3px; padding: 3px; text-align: center; background-color: #7FB100; cursor:pointer; }
         .ui.info.message {max-width: 480px;}
         .mainwp-page-title {display: none;}
         -->
         </style>
         <div class='ui segment'>
           <p><?php _e('Please make sure you do a "sync dashboard with sites" before you run a scan!','hhdev-mwpcpv'); ?></p>
         <form id="run-scan" name="run-scan" action="<?php echo str_replace('%7E', '~', $_SERVER['REQUEST_URI']); ?>" method="post">
          <p><input name="mwpcpv-run-scan" type="hidden" value="1" /></p>
          <?php
          // hide button is there is no file yet
          if($MainWPCheckPluginVulnerabilityActivator->hhdev_data_file_exists()) {
          ?>
          <p><a class="ui button green" href="#" onclick="javascript:document.getElementById('run-scan').submit();"><?php _e('Run the scan!','hhdev-mwpcpv'); ?></a></p>
        <?php } // end if file exist ?>

         </form>
         <?php if (isset($_POST['mwpcpv-run-scan'])) { ?>
         <p>&nbsp;</p>
         <p id="toggle-novuln"><?php _e('Hide/show websites with no vulnerabilities.','hhdev-mwpcpv'); ?></p>
         <?php } ?>
       </div>

         <?php
         // hit the button to run the scan
         if (isset($_POST['mwpcpv-run-scan'])) {

           // Fetch all child-sites
           $websites = apply_filters('mainwp_getsites', $MainWPCheckPluginVulnerabilityActivator->getChildFile(), $MainWPCheckPluginVulnerabilityActivator->getChildKey(), null);

           $sites_ids = array();
            if ( is_array( $websites ) ) {
              foreach ( $websites as $website ) {
                  $sites_ids[] = $website['id'];
              }
            }

            //$sites_ids = array( 20,39,45 ); // test site
            $option = array('plugins'=> true,);

            // get all plugins for single website
            $websites = apply_filters( 'mainwp_getdbsites', $MainWPCheckPluginVulnerabilityActivator->getChildFile(), $MainWPCheckPluginVulnerabilityActivator->getChildKey(), $sites_ids, array(), $option );

            // load file data before foreach loops
            $file = $MainWPCheckPluginVulnerabilityActivator->hhdev_load_file();
            $file = json_decode($file, true);

              foreach ( $websites as $website ) {

                  if ( $website->plugins != '' ) {

                      $plugins = json_decode( $website->plugins, 1 );

                      if ( is_array( $plugins ) && count( $plugins ) != 0 ) {

                        echo "<div class='ui segment website'>";

                        echo '<h2>'.$website->name.'</h2>';

                        $vuln_notice = false; // default vuln notice

                          foreach($plugins as $plugin) {

                            // make plugin slug compatible
                            $plugin_slug = explode('/', $plugin['slug']);
                            $slug = $plugin_slug[0];

                            foreach ( $file as $key => $plugin_data) {

                              if($plugin_data['slug'] == $slug) {

                                // is patched?
                                $patched = wp_sprintf( __('No','hhdev-mwpcpv'));
                                if($plugin_data['patched']) $patched = wp_sprintf( __('Yes','hhdev-mwpcpv'));

                                // get the vuln version
                                $vuln_version = '';
                                $vuln_version = $MainWPCheckPluginVulnerabilityActivator->hhdev_get_version_from_array($plugin_data['affected_versions'])['to_version'];

                                // get the compare operator
                                $to_inclusive = $MainWPCheckPluginVulnerabilityActivator->hhdev_get_version_from_array($plugin_data['affected_versions'])['to_inclusive'];

                                $compare = '<';
                                if($to_inclusive) $compare = '<=';

                              //  if ($slug == 'wp-mail-logging') echo '<p>vuln version: '.$vuln_version.' -> plugin: '.$plugin['version'].'-> '.$plugin_data['title'].'</p>';

                                if($MainWPCheckPluginVulnerabilityActivator->hhdev_plugin_needs_update($plugin['version'],$vuln_version,$compare)) {

                                  echo '<h3>'.$plugin['name'].'</h3>';
                                  echo wp_sprintf( __('Website plugin version: %s','hhdev-mwpcpv'), $plugin['version']);
                                  echo '<br>';
                                  echo $plugin_data['title'].'<br>';

                                  echo wp_sprintf( __('Has patch: %s','hhdev-mwpcpv'), $patched);
                                  echo '<br>';


                                  echo wp_sprintf( __('Reference:','hhdev-mwpcpv'));
                                  echo ' <a href="'.$plugin_data['references'][0].'" target="_blank">'.$plugin_data['references'][0].'</a></p>';


                                  // set vuln plugin notice to true
                                  $vuln_notice = true;
                                }

                              } // end if

                            }// end foreach plugins_data

                          } // end foreach

                          if($vuln_notice == false) echo '<span>'.wp_sprintf( __('No vulnerabilities found!','hhdev-mwpcpv').'</span>');

                          echo '</div>'; // close the segment

                      } // end if

                  } // end if

              } // end foreach

        } // end if post data
        ?>
        </div>
      </div>
        <?php
      //  do_action('mainwp-pagefooter-extensions', __FILE__); // mainwp footer

      }


/* array $plugins example
Array
(
    [0] => Array
        (
            [mainwp] => F
            [name] => Autoptimize
            [slug] => autoptimize/autoptimize.php
            [description] => Makes your site faster by optimizing CSS, JS, Images, Google fonts and more.
            [version] => 3.1.8.1
            [active] => 0
        )

    [1] => Array...


*/



 } // end of class
